import tkinter as tk
import tkinter.ttk as ttk
import time
import random
import sys
n = 200 # How many agents are on the Canvas

class Person(object):
    # Constructor: creates a new person/agent
    def __init__(self, canvas, x, y, fill):
        # Calculate parameters for the oval/circle to be drawn
        r = 4 # The radius of the agents circle, how big they are
        x0 = x-r
        y0 = y-r
        x1 = x+r
        y1 = y+r

        # Initialize the agents attributrs
        self.x = x
        self.y = y
        self.infected = False 
        self.infectedtimer = 0
        self.testtimer = 25
        self.testnegativ = False
        self.testpositiv = False
        self.testpositivfalse = False
        self.testnegativfalse = False
        
        
        self.canvas = canvas
        self.circle_id = canvas.create_oval(x0,y0,x1,y1, fill=fill, outline='')
        

    # A  Method that moves the agents a random number between +2 or minus -2 on the x and y values
    def move(self):

        if self.testpositiv == True or self.testpositivfalse == True:
            x1, y1, x2, y2 = self.canvas.bbox(self.circle_id)
            dx = random.choice([0, 0])
            dy = random.choice([0, 0])

            self.canvas.move(self.circle_id, dx, dy)
            self.x = self.x + dx
            self.y = self.y + dy
    
            
        else:
            x1, y1, x2, y2 = self.canvas.bbox(self.circle_id)
            dx = random.choice([-2, 2])
            dy = random.choice([-2, 2])

            self.canvas.move(self.circle_id, dx, dy)
            self.x = self.x + dx
            self.y = self.y + dy

            
        self.agent_infectedtimer() # We try to use our infected timer Method in the move loop
        self.test_people()

    # A method that checks if the agents are close to eachother and infects them.
    def check_infected(self, persons):
        
        #Here the method checks how close they are to eachother 
        for person in persons: 
            d = ((self.x - person.x)**2 + (self.y - person.y)**2)**(1/2)

            # If its less than 20, then the agent gets infected
            radius = 20
            
            if person.testnegativfalse == True:
                radius = 80
                
            if d < radius and person.infected == True and self.infected == False:
                    self.infect()   

    # HVORFOR ER DER SÅ NOGLE RØDE DER RYKKER SIG, jamen det jo fordi de bliver smittet af de røde der står stille og dermed er de ikke blevet testet, så de går ikke ind i min if statement i move
    

    # A method thas makes the infectedtimer count down 
    def agent_infectedtimer(self):
        #Here it checks if the agents infectedtimer has reached 0 and them makes them healthy(green)
        if self.infectedtimer < 1 and self.infected == True:
            self.infected = False
            self.infectedtimer = 1000000
            self.canvas.itemconfig(self.circle_id, fill='green')
            
        # If the above if statement is not fulfilled, the infectedtimer is lowered
        else:
            self.infectedtimer -= 1

    # A method that infect the agents and makes them red, and starts the infected timer.
    def infect(self):
        self.infected = True
        self.canvas.itemconfig(self.circle_id, fill='red')
        self.infectedtimer = 1000000

    def test_people(self):
        if self.testtimer < 1:
            T = random.uniform(0,1)
            self.testtimer = 100
            #Du får en positiv corona test, da man er inficeret med corona,
            #Medmindre kviktesten tester forkert og du får en falsknegativ som der så er 1.6% chance for.
            if self.infected:
                    TP = random.uniform(0,1)
                    if TP < 0.016:
                        self.testnegativefalseres()
                    else:
                        self.testpositiveres()
                            
            #Du får en negativ corona test, da hvis man ikke er inficeret med corona kan man så kun være negativ,
            #Medmindre kviktesten tester forkert, og du dermed får en falskpositiv det er der så 9.6% chance for at det sker
            else:
                    TN = random.uniform(0,1)
                    if TN < 0.096:
                        self.testpositivefalseres()
                    else:   
                        self.testnegativeres()
            
            
        # If the above if statement is not fulfilled, the infectedtimer is lowered
        else:
            self.testtimer -= 1

    def testnegativeres(self):
        self.testnegativ = True
        self.testpositiv = False
        self.testpositivfalse = False
        self.testnegativfalse = False
        
    def testpositiveres(self):
        self.testnegativ = False
        self.testpositiv = True
        self.testpositivfalse = False
        self.testnegativfalse = False
        
    def testpositivefalseres(self):
        self.testpositiv = False
        self.testnegativ = False
        self.testpositivfalse = True
        self.testnegativfalse = False
        self.canvas.itemconfig(self.circle_id, fill='yellow')
        
        

    def testnegativefalseres(self):
        self.testpositiv = False
        self.testnegativ = False
        self.testpositivfalse = False
        self.testnegativfalse = True
        
        self.canvas.itemconfig(self.circle_id, fill='blue')
        
    
class App(object):
    def __init__(self, master, **kwargs):

     # Create the canvas on which the agents are drawn
        self.master = master
        self.canvas = tk.Canvas(self.master, width=800, height=800,background='white')
        self.canvas.grid(row = 0, columnspan = 3)
        

        # Create a reset button for the simulation
        self.but_reset = ttk.Button(master, text = "Reset", command=self.init_sim)
        self.but_reset.grid(row = 1, column =0)
        

        #Creating 2 buttons to change the amount of agents
        self.amount_agent = ttk.Button(master, text = "Agents +1 ", command = self.agentsup)
        self.amount_agent.grid(row = 1, column = 1)

        self.amount_agent = ttk.Button(master, text = "Agents -1 ", command=self.agentsdown)
        self.amount_agent.grid(row = 1, column = 2)
        
         
        # Start / init the simulation
        self.init_sim()

        self.master.after(0, self.update)
        self.frame = 0
        
    # A method to make additional agents on the canvas
    def agentsup(self):
        n = n+1
        self.init_sim()
        
    # A method to make less agents on the canvas
    def agentsdown(self):
        n = n-1
        self.init_sim()

    # A method that updates the agents every frame
    def update(self):

        # Update / move each agent
        for person in self.persons:
            person.move()
            person.check_infected(self.persons)
            
        
        
        
        # Count number of infected persons
        ni = 0
        for p in self.persons:
            if p.infected:
                ni += 1
        #Some data that gets printed in the terminal
        print("Number of infected persons:", ni)
        print("Number of agents: ",n)
        print("Patient 0: " + str(self.persons[0].infectedtimer))

        self.master.after(100, self.update)
        self.frame += 1


    # Start / init simulation (clear all agents and create new ones)
    def init_sim(self):
        self.canvas.delete('all')
        self.persons = []

        # Decides where agents starts on the canvas, they start random from the x and y values from 0 to 800.
        for i in range(n):
            x = random.randint(0,800)
            y = random.randint(0,800)
            p = Person(self.canvas, x, y, 'black') # The color of the agents is black when they are not infected

            #Infect 5% of the agents at the start of the simulation
            if random.uniform(0,1) < 0.05:
                p.infect()

            self.persons.append(p)

        self.persons[0].infect()
        
#spr@otg
        
# Create the Tkinter application and run it
root = tk.Tk()
app = App(root)
start=time.time()
root.mainloop()
end=time.time()
print("Frames:",app.frame)
print("Runtime:",end-start)
print("Framerate:", app.frame/(end-start))
